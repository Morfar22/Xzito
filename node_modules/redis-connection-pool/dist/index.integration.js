"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
// import * as sinon from 'sinon';
const index_1 = __importDefault(require("./index"));
describe('Redis Pool', () => {
    let pool;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        console.log('init');
        pool = (0, index_1.default)('redisPoolTest1', {
            max_clients: 5,
            redis: {
                url: '127.0.0.1:6379',
                database: 1
            },
        });
        yield pool.init();
    }));
    afterEach(() => {
        console.log('clean');
        pool.clean('*');
        pool = undefined;
    });
    it('can connect to database', () => {
        (0, chai_1.expect)(typeof pool).to.eql('object');
        (0, chai_1.expect)(pool.uid).to.eql('redisPoolTest1');
        (0, chai_1.expect)(pool.redis.url).to.eql('127.0.0.1:6379');
    });
    describe('store and fetch', () => {
        console.log('-0');
        it('set', () => __awaiter(void 0, void 0, void 0, function* () {
            console.log('-1');
            (0, chai_1.expect)(yield pool.set('an id', 'a value')).to.eql('OK');
        }));
        it('get', () => __awaiter(void 0, void 0, void 0, function* () {
            console.log('-2');
            (0, chai_1.expect)(yield pool.get('an id')).to.equal('a value');
        }));
    });
});
//# sourceMappingURL=/index.integration.js.map